Solid:
    单一职责原则
    开闭原则
    里氏替换原则: 子类可以扩展父类的功能，但是不能改变父类原有的功能
    接口隔离原则
    依赖倒置原则：高层模块不能依赖底层模块。面向接口编程，不要面向实现编程。
创建型模式：
    单例模式：
    工厂模式：
    抽象工厂模式：
    建造者模式：
    原型模式：创建相同或相似的对象。浅clone,深clone
结构型模式：
    适配器模式：转换方法
        类：类适配器类继承适配器类
        对象：对象适配器类将适配器类作为属性
    桥接模式：抽象与实现分离
    装饰模式：扩展方法
    外观模式：方便调用
    享元模式：享元工厂类 HashMap
        提供一个用于存储享元对象的享元池，用户需要对象时，首先从享元池中获取，如果享元池中不存在，则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。
    代理模式：代理对象作为访问对象和目标对象之间的中介。
    组合模式：
行为型模式：
    命令模式：调用者，接收者
    中介者模式：
    观察者模式：一对多
    状态模式：对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。
    策略模式： 环境类
    责任链模式：
    解释器模式：com.singularsys.jep  Java expression parser  Java 表达式分析器
    模块模式：模板类模板方法
    迭代器模式：
    访问者模式：
    备忘录模式/快照模式：恢复到之前保存的状态
